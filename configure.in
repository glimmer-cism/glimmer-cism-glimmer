dnl Process this file with autoconf to produce a configure script.

dnl set version
m4_define([glimmer_major_version], [1])
m4_define([glimmer_minor_version], [0])
m4_define([glimmer_micro_version], [18])
m4_define([glimmer_version],
	[glimmer_major_version.glimmer_minor_version.glimmer_micro_version])

AC_INIT([GLIMMER],[glimmer_version],[glimmer-cism-devel@lists.berlios.de])
AC_CONFIG_HEADERS(config.inc)
AM_INIT_AUTOMAKE

GLIMMER_MAJOR_VERSION=glimmer_major_version
GLIMMER_MINOR_VERSION=glimmer_minor_version
GLIMMER_MICRO_VERSION=glimmer_micro_version
GLIMMER_VERSION=glimmer_version
AC_SUBST(GLIMMER_MAJOR_VERSION)
AC_SUBST(GLIMMER_MINOR_VERSION)
AC_SUBST(GLIMMER_MICRO_VERSION)
AC_SUBST(GLIMMER_VERSION)

AC_CONFIG_SRCDIR([glimmer-config.in])

AC_PROG_RANLIB

# save compiler flags, autoconf will change them later
glimmer_FCFLAGS=$FCFLAGS
glimmer_FFLAGS=$FFLAGS
AC_DEFINE_UNQUOTED(GLIMMER_FCFLAGS,"${glimmer_FCFLAGS}",[fortran compiler flags the model is configured with])

AC_PROG_CC
AC_PROG_FC
AC_PROG_F77
AC_PROG_EGREP
FCFLAGS=$glimmer_FCFLAGS
FFLAGS=$glimmer_FFLAGS
AC_LANG(Fortran)
AC_FC_SRCEXT(f90)
AX_F90_MODULE_FLAG

# checking for f2003 command line parser
AC_MSG_CHECKING([for f2003 command line parser])
AC_LINK_IFELSE([AC_LANG_PROGRAM([],
               [i=command_argument_count()
                call get_command_argument(i)  ])],
               [AC_DEFINE(HAVE_2003ARGS,,[defined if you have fortran 2003 intrinsics for parsing command line])
                AC_MSG_RESULT(yes)], [AC_MSG_RESULT(no)])

# which Fortran compiler are we running?
AC_MSG_CHECKING([which fortran compiler])
f95v="no idea"
f95string=`$FC -V 2>&1`
f95_preprocessor="-fpp"
# testing for SUN f95 compiler
fs=`echo $f95string |$EGREP "Sun|Forte"`
if test "$fs" != "" ; then
  f95v="SUN f95"
  CFORTRAN_CFLAGS=-DsunFortran
fi
# testing for NAG f95 compiler
fs=`echo $f95string |$EGREP "NAGWare"`
if test "$fs" != "" ; then
  f95v="NAGWare f95"
  CFORTRAN_CFLAGS=-DNAGf90Fortran
fi
# testing for INTEL ifort compiler
fs=`echo $f95string |$EGREP "Intel"`
if test "$fs" != "" ; then
  f95v="Intel ifort"
  CFORTRAN_CFLAGS=-DpgiFortran
fi
# testing for gfortran
f95string=`$FC -v 2>&1`
fs=`echo $f95string |$EGREP "gcc"`
if test "$fs" != "" ; then
  f95v="gfortran"
  f95_preprocessor="-x f95-cpp-input"
  CFORTRAN_CFLAGS=-DpgiFortran
fi
# testing for Portland group
f95string=`$FC -V 2>&1`
fs=`echo $f95string |$EGREP "Portland"`
if test "$fs" != "" ; then
  f95v="Portland pgf90"
  f95_preprocessor="-Mpreprocess"
  CFORTRAN_CFLAGS=-DpgiFortran
fi
AC_SUBST(CFORTRAN_CFLAGS)

AC_MSG_RESULT([$f95v])

FCFLAGS="$FCFLAGS"
FFLAGS="$FFLAGS"

dnl Checking for python
AM_PATH_PYTHON([2.3],,[AC_MSG_RESULT(need at least python 2.3)])

# checking for BLAS library
ac_gl_have_blas=0
ACX_BLAS([ac_gl_have_blas=1])
AM_CONDITIONAL(EXT_BLAS,test "$ac_gl_have_blas" == 1)

# checking for netCDF
ACX_NETCDF([],[AC_MSG_ERROR(cannot find netCDF fortran library)])

# checking for ENMABAL
AC_ARG_WITH(enmabal,AS_HELP_STRING([--with-enmabal],[location ENMABAL library]),[ac_cv_enmabal_prefix=$withval])
if test "$ac_cv_enmabal_prefix" != ""; then
  LIBS="$LIBS -lsmb"
  AC_MSG_RESULT(enmabal location: $ac_cv_enmabal_prefix)
  AC_DEFINE(USE_ENMABAL,1,[Define to 1 if you want to use ENMABAL])
  FCFLAGS="$FCFLAGS $ax_cv_f90_modflag$ac_cv_enmabal_prefix"
  LDFLAGS="$LDFLAGS -L$ac_cv_enmabal_prefix"
  AC_MSG_CHECKING([for f90 ENMABAL interface])
  AC_COMPILE_IFELSE([AC_LANG_PROGRAM([],[use smb_mecons])],AC_MSG_RESULT([yes]),AC_MSG_FAILURE([no]))
fi

# some options
AC_MSG_CHECKING([whether profilng is enabled])
AC_ARG_ENABLE(profile, AS_HELP_STRING([--enable-profile],[Turn on profiling]),
[case "${enableval}" in
 yes)  AC_DEFINE(PROFILING,1,[Define to 1 if you want to enable extra profiling])
       FCFLAGS="$FCFLAGS -pg"
       AC_MSG_RESULT([yes]);;	
 no)   AC_MSG_RESULT([no]);;
 *) AC_MSG_ERROR(bad value ${enableval} for --enable-profile) ;;
esac],[AC_MSG_RESULT([no])])

AC_MSG_CHECKING([whether command-line arguments are enabled])
AC_ARG_ENABLE(command-line, AS_HELP_STRING([--enable-command-line],[Turn on command-line arguments]),
[case "${enableval}" in
 yes)  AC_DEFINE(COMMAND_LINE,1,[Define to 1 if you want to enable command-line arguments])
       AC_MSG_RESULT([yes]);;	
 no)   AC_MSG_RESULT([no]);;
 *) AC_MSG_ERROR(bad value ${enableval} for --enable-command-line) ;;
esac],[AC_MSG_RESULT([no])])

AC_MSG_CHECKING([whether extended restarts are enabled])
AC_ARG_ENABLE(restarts, AS_HELP_STRING([--enable-restarts],[Build extended restart code]),
[case "${enableval}" in
 yes)  AC_DEFINE(RESTARTS,1,[Define to 1 if you want to enable extended restarts])
       AC_MSG_RESULT([yes]);;	
 no)   AC_MSG_RESULT([no]);;
 *) AC_MSG_ERROR(bad value ${enableval} for --enable-restarts) ;;
esac],[AC_MSG_RESULT([no])])
AM_CONDITIONAL([BUILD_RESTARTS],[test "$enable_restarts" == "yes"])

AC_MSG_CHECKING([whether the build is single precision])
AC_ARG_ENABLE(sp, AS_HELP_STRING([--enable-sp],[Build code as single precision]),
[case "${enableval}" in
 yes)  AC_DEFINE(GLIMMER_SP,1,[Define to 1 if you want to enable extended restarts])
       AC_MSG_RESULT([yes]);;	
 no)   AC_MSG_RESULT([no]);;
 *) AC_MSG_ERROR(bad value ${enableval} for --enable-sp) ;;
esac],[AC_MSG_RESULT([no])])

# should we run the tests
AC_MSG_CHECKING([whether we should run the tests])
AC_ARG_ENABLE(tests, AS_HELP_STRING([--enable-tests],[Run short tests]),
[case "${enableval}" in
 yes)  AC_MSG_RESULT([yes]);;	
 no)   AC_MSG_RESULT([no]);;
 *) AC_MSG_ERROR(bad value ${enableval} for --enable-tests) ;;
esac],[AC_MSG_RESULT([no])])
AM_CONDITIONAL([RUN_TESTS], [test "$enable_tests" == "yes"])

# Checking if sources are from subversion
AC_CHECK_FILE($srcdir/src/fortran/.svn/entries,have_svn_entries="yes",have_svn_entries="no")
GLIMMER_SVN_VERS=""
if test "$have_svn_entries" == "yes"; then
   GLIMMER_SVN_VERS=" svn_vers_string"
fi
AC_SUBST(GLIMMER_SVN_VERS)
AM_CONDITIONAL([HAVE_SVN],[test "$have_svn_entries" == "yes"])

AC_CONFIG_FILES([Makefile m4macros/Makefile src/Makefile src/python/Makefile src/fortran/Makefile src/fortran/SLAP_library/Makefile \
		tests/Makefile])
AC_OUTPUT([glimmer-config src/fortran/glimmer_vers.F90.in])
