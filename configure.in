dnl Process this file with autoconf to produce a configure script.

dnl set version
m4_define([glimmer_major_version], [0])
m4_define([glimmer_minor_version], [5])
m4_define([glimmer_micro_version], [2])
m4_define([glimmer_version],
	[glimmer_major_version.glimmer_minor_version.glimmer_micro_version])

AC_INIT([GLIMMER],[glimmer_version],[glimmer-discuss@forge.nesc.ac.uk])
AM_INIT_AUTOMAKE

GLIMMER_MAJOR_VERSION=glimmer_major_version
GLIMMER_MINOR_VERSION=glimmer_minor_version
GLIMMER_MICRO_VERSION=glimmer_micro_version
GLIMMER_VERSION=glimmer_version
AC_SUBST(GLIMMER_MAJOR_VERSION)
AC_SUBST(GLIMMER_MINOR_VERSION)
AC_SUBST(GLIMMER_MICRO_VERSION)
AC_SUBST(GLIMMER_VERSION)

AC_PROG_RANLIB

# save compiler flags, autoconf will change them later
glimmer_FCFLAGS=$FCFLAGS
AC_PROG_FC
FCFLAGS=$glimmer_FCFLAGS
AC_LANG_PUSH(Fortran)
AC_FC_SRCEXT(f90)
if test "$FC" == gfortran; then
  FCFLAGS="$FCFLAGS -x f95-cpp-input"
else
  FCFLAGS="$FCFLAGS -fpp"
fi

dnl Checking for python
AM_PATH_PYTHON([2.3],,[AC_MSG_RESULT(need at least python 2.3)])

# checking if we build the docs
AC_MSG_CHECKING([whether we should build documentation])
AC_ARG_ENABLE(doc, AS_HELP_STRING([--enable-doc],[Build documentation]),
[case "${enableval}" in
 yes)  AC_MSG_RESULT([yes]);;	
 no)   AC_MSG_RESULT([no]);;
 *) AC_MSG_ERROR(bad value ${enableval} for --enable-doc) ;;
esac],[AC_MSG_RESULT([no])])
AC_CHECK_PROGS(LATEX,[latex]) 
AC_CHECK_PROGS(DVIPS,[dvips]) 
AC_CHECK_PROGS(DVIPDFT,[dvipdfm]) 
AC_CHECK_PROGS(GNUPLOT,[gnuplot]) 
AC_CHECK_PROGS(DIA,[dia]) 
AC_CHECK_PROGS(FIG2DEV,[fig2dev]) 
AC_CHECK_PROGS(PS2EPSI,[ps2epsi]) 
AC_CHECK_PROGS(SED,[sed])
AM_CONDITIONAL([DO_DOC_PS],  [test "$DVIPS" != ""])
AM_CONDITIONAL([DO_DOC_PDF], [test "$DVIPDFT" != ""])
AM_CONDITIONAL([BUILD_DOCS], [test "$enable_doc" == "yes"])

# checking for BLAS library
AC_ARG_WITH(blas,AS_HELP_STRING([--with-blas],[how to link external BLAS library]),[ac_cv_blas=$withval])
ac_cv_haveblas=0
if test "$ac_cv_blas" != ""; then
  LIBS="$LIBS $ac_cv_blas"
  AC_MSG_CHECKING([for external BLAS lib])
  AC_LINK_IFELSE([AC_LANG_PROGRAM([],[f=ddot(1,1.,1.,1.,1.)])],ac_cv_haveblas=1,ac_cv_haveblas=0)
  if test "$ac_cv_haveblas" == 1; then
    AC_MSG_RESULT([yes])
  else
    AC_MSG_RESULT([no])
  fi
fi
AM_CONDITIONAL(EXT_BLAS,test "$ac_cv_haveblas" == 1)

# checking for netCDF
AC_ARG_WITH(netcdf,AS_HELP_STRING([--with-netcdf],[location where netCDF is installed]),[ac_cv_netcdf_prefix=$withval])
if test "$ac_cv_netcdf_prefix" != ""; then
  AC_MSG_RESULT(netCDF location: $ac_cv_netcdf_prefix)
  FCFLAGS="$FCFLAGS -I$ac_cv_netcdf_prefix/include"
  LDFLAGS="$LDFLAGS -L$ac_cv_netcdf_prefix/lib"
fi
AC_CHECK_LIB(netcdf,NF_INQ_LIBVERS)
AC_MSG_CHECKING([for f90 netCDF interface])
AC_COMPILE_IFELSE([AC_LANG_PROGRAM([],[use netcdf])],AC_MSG_RESULT([yes]),AC_MSG_FAILURE([no]))
#AC_LANG_POP(Fortran)

# checking for ENMABAL
AC_ARG_WITH(enmabal,AS_HELP_STRING([--with-enmabal],[location ENMABAL library]),[ac_cv_enmabal_prefix=$withval])
if test "$ac_cv_enmabal_prefix" != ""; then
  LIBS="$LIBS -lsmb"
  AC_MSG_RESULT(enmabal location: $ac_cv_enmabal_prefix)
  FCFLAGS="$FCFLAGS -I$ac_cv_enmabal_prefix -DUSE_ENMABAL"
  LDFLAGS="$LDFLAGS -L$ac_cv_enmabal_prefix"
  AC_MSG_CHECKING([for f90 ENMABAL interface])
  AC_COMPILE_IFELSE([AC_LANG_PROGRAM([],[use smb_mecons])],AC_MSG_RESULT([yes]),AC_MSG_FAILURE([no]))
fi
AC_LANG_POP(Fortran)

# some options
AC_MSG_CHECKING([whether profilng is enabled])
AC_ARG_ENABLE(profile, AS_HELP_STRING([--enable-profile],[Turn on profiling]),
[case "${enableval}" in
 yes)  FCFLAGS="$FCFLAGS -DPROFILING -pg"; AC_MSG_RESULT([yes]);;	
 no)   AC_MSG_RESULT([no]);;
 *) AC_MSG_ERROR(bad value ${enableval} for --enable-profile) ;;
esac],[AC_MSG_RESULT([no])])

# should we run the tests
AC_MSG_CHECKING([whether we should run the tests])
AC_ARG_ENABLE(tests, AS_HELP_STRING([--enable-tests],[Run short tests]),
[case "${enableval}" in
 yes)  AC_MSG_RESULT([yes]);;	
 no)   AC_MSG_RESULT([no]);;
 *) AC_MSG_ERROR(bad value ${enableval} for --enable-tests) ;;
esac],[AC_MSG_RESULT([no])])
AM_CONDITIONAL([RUN_TESTS], [test "$enable_tests" == "yes"])

# Checking if sources are from CVS
AC_CHECK_FILE(./src/fortran/CVS/Entries,have_cvs_entries="yes",have_cvs_entries="no")
GLIMMER_CVS_VERS=""
if test "$have_cvs_entries" == "yes"; then
   GLIMMER_CVS_VERS=" cvs_vers_string"
fi
AC_SUBST(GLIMMER_CVS_VERS)
AM_CONDITIONAL([HAVE_CVS],[test "$have_cvs_entries" == "yes"])

AC_CONFIG_FILES([Makefile src/Makefile src/python/Makefile src/fortran/Makefile src/fortran/SLAP_library/Makefile \
		doc/Makefile doc/common/Makefile doc/dg/Makefile doc/dg/figures/Makefile \
		doc/ug/Makefile doc/ug/figs/Makefile doc/num/Makefile doc/num/figs/Makefile doc/num/gnu/Makefile \
		tests/Makefile])
AC_OUTPUT([glimmer-config src/fortran/glimmer_version.f90.in doc/common/version.tex])
