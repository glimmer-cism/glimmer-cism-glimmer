! +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
! +                                                           +
! +  ncdf_file.f90 - part of the GLIMMER ice model            + 
! +                                                           +
! +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
! 
! Copyright (C) 2004 GLIMMER contributors - see COPYRIGHT file 
! for list of contributors.
!
! This program is free software; you can redistribute it and/or 
! modify it under the terms of the GNU General Public License as 
! published by the Free Software Foundation; either version 2 of 
! the License, or (at your option) any later version.
!
! This program is distributed in the hope that it will be useful, 
! but WITHOUT ANY WARRANTY; without even the implied warranty of 
! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the 
! GNU General Public License for more details.
!
! You should have received a copy of the GNU General Public License 
! along with this program; if not, write to the Free Software 
! Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 
! 02111-1307 USA
!
! GLIMMER is maintained by:
!
! Ian Rutt
! School of Geographical Sciences
! University of Bristol
! University Road
! Bristol
! BS8 1SS
! UK
!
! email: <i.c.rutt@bristol.ac.uk> or <ian.rutt@physics.org>
!
! GLIMMER is hosted on NeSCForge:
!
! http://forge.nesc.ac.uk/projects/glimmer/
!
! +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

#define NCI infile%nc

module glimmer_ncinfile
  !*FD routines for GLIMMER netCDF file input
  !*FD written by Magnus Hagdorn, 2004

contains
  subroutine openall_in(model)
    !*FD open all netCDF files for input
    use glide_types
    use glimmer_ncdf
    implicit none
    type(glide_global_type) :: model
    
    ! local variables
    type(glimmer_nc_input), pointer :: ic

    ic=>model%funits%in_first
    do while(associated(ic))
       call glimmer_nc_openfile(ic,model)
       ic=>ic%next
    end do
  end subroutine openall_in

  subroutine readall(model)
    !*FD read from netCDF file
    use glide_types
    use glimmer_ncdf
    implicit none
    type(glide_global_type) :: model

    ! local variables
    type(glimmer_nc_input), pointer :: ic    

    ic=>model%funits%in_first
    do while(associated(ic))
       call glimmer_nc_checkread(ic,model)
       if (ic%nc%just_processed) then
          call glimmer_nc_read(ic,model)
       end if
       ic=>ic%next
    end do
  end subroutine readall

  subroutine closeall_in(model)
    !*FD close all netCDF files for input
    use glide_types
    use glimmer_ncdf
    implicit none
    type(glide_global_type) :: model
    
    ! local variables
    type(glimmer_nc_input), pointer :: ic

    ic=>model%funits%in_first
    do while(associated(ic))
       ic=>delete(ic)
    end do
    model%funits%in_first=>NULL()
  end subroutine closeall_in

  subroutine glimmer_nc_openfile(infile,model)
    !*FD open an existing netCDF file
    use glimmer_ncdf
    use glide_types
    use glimmer_cfproj
    use glimmer_log
    implicit none
    type(glimmer_nc_input), pointer :: infile
    !*FD structure containg input netCDF descriptor
    type(glide_global_type) :: model
    !*FD the model instance

    ! local variables
    character(len=50) varname
    integer nvars
    integer i, dimsize
    integer status    
    character(len=100) message
    
    ! open netCDF file
    status = nf90_open(NCI%filename,NF90_NOWRITE,NCI%id)
    call nc_errorhandle(__FILE__,__LINE__,status)
    call write_log_div
    call write_log('opening file '//trim(NCI%filename)//' for input')

    ! getting projections
    model%projection = CFproj_GetProj(NCI%id)

    ! reading dimensions
    ! getting ids
    status = nf90_inq_dimid(NCI%id, 'x0', NCI%x0dim)
    call nc_errorhandle(__FILE__,__LINE__,status)
    status = nf90_inq_dimid(NCI%id, 'y0', NCI%y0dim)
    call nc_errorhandle(__FILE__,__LINE__,status)
    status = nf90_inq_dimid(NCI%id, 'x1', NCI%x1dim)
    call nc_errorhandle(__FILE__,__LINE__,status)
    status = nf90_inq_dimid(NCI%id, 'y1', NCI%y1dim)
    call nc_errorhandle(__FILE__,__LINE__,status)
    status = nf90_inq_dimid(NCI%id, 'level', NCI%leveldim)
    call nc_errorhandle(__FILE__,__LINE__,status)
    status = nf90_inq_dimid(NCI%id, 'time', NCI%timedim)
    call nc_errorhandle(__FILE__,__LINE__,status)

    ! getting lengths of x, y and level dimensions
    ! bail out if they do not match
    status = nf90_inquire_dimension(NCI%id,NCI%x0dim,len=dimsize)
    call nc_errorhandle(__FILE__,__LINE__,status)
    if (dimsize.ne.model%general%ewn-1) then
       write(message,*) 'Error, reading file ',trim(NCI%filename),' size x0dim does not match: ',dimsize,model%general%ewn-1
       call error_log(message)
       stop
    end if
    status = nf90_inquire_dimension(NCI%id,NCI%y0dim,len=dimsize)
    call nc_errorhandle(__FILE__,__LINE__,status)
    if (dimsize.ne.model%general%nsn-1) then
       write(message,*) 'Error, reading file ',trim(NCI%filename),' size y0dim does not match: ',dimsize,model%general%nsn-1
       call error_log(message)
       stop
    end if
    status = nf90_inquire_dimension(NCI%id,NCI%x1dim,len=dimsize)
    call nc_errorhandle(__FILE__,__LINE__,status)
    if (dimsize.ne.model%general%ewn) then
       write(message,*) 'Error, reading file ',trim(NCI%filename),' size x1dim does not match: ',dimsize,model%general%ewn
       call error_log(message)
       stop
    end if
    status = nf90_inquire_dimension(NCI%id,NCI%y1dim,len=dimsize)
    call nc_errorhandle(__FILE__,__LINE__,status)
    if (dimsize.ne.model%general%nsn) then
       write(message,*) 'Error, reading file ',trim(NCI%filename),' size y1dim does not match: ',dimsize,model%general%nsn
       call error_log(message)
       stop
    end if  

    ! getting variables
    status = nf90_inquire(NCI%id,nvariables=nvars)
    call nc_errorhandle(__FILE__,__LINE__,status)

    ! get id of time variable
    status = nf90_inq_varid(NCI%id,'time',NCI%timevar)
    call nc_errorhandle(__FILE__,__LINE__,status)

    do i=1,nvars
       status = nf90_inquire_variable(NCI%id,i,name=varname)
       call nc_errorhandle(__FILE__,__LINE__,status)
       select case(varname)
       !GENVARS!   
       end select
    end do

    ! getting length of time dimension and allocating memory for array containing times
    status = nf90_inquire_dimension(NCI%id,NCI%timedim,len=dimsize)
    call nc_errorhandle(__FILE__,__LINE__,status)
    allocate(infile%times(dimsize))
    infile%nt=dimsize
    status = nf90_get_var(NCI%id,NCI%timevar,infile%times)
  end subroutine glimmer_nc_openfile

  subroutine glimmer_nc_checkread(infile,model)
    !*FD check if we should read from file
    use glimmer_log
    use glimmer_ncdf
    use glide_types
    implicit none
    type(glimmer_nc_input), pointer :: infile
    !*FD structure containg output netCDF descriptor
    type(glide_global_type) :: model
    !*FD the model instance

    character(len=100) :: message

    if (infile%current_time.le.infile%nt) then
       if (.not.NCI%just_processed) then
          call write_log_div
          write(message,*) 'Reading time slice ',infile%current_time,'(',infile%times(infile%current_time),') from file ', &
               trim(NCI%filename), ' at time ', model%numerics%time
          call write_log(message)
          NCI%just_processed = .TRUE.
          NCI%processsed_time = model%numerics%time
       end if
    end if
    if (model%numerics%time.gt.NCI%processsed_time) then
       if (NCI%just_processed) then
          ! finished reading during last time step, need to increase counter...
          infile%current_time = infile%current_time + 1
          NCI%just_processed = .FALSE.
       end if
    end if
  end subroutine glimmer_nc_checkread

  subroutine glimmer_nc_read(infile,model,scale_vars)
    !*FD read variables from a netCDF file
    use glimmer_log
    use glimmer_ncdf
    use glide_types
    use glimmer_global, only : dp
    use physcon, only : scyr
    use paramets, only : thk0, tim0, vel0, vis0, len0, tau0, acc0
    implicit none
    type(glimmer_nc_input), pointer :: infile
    !*FD structure containg output netCDF descriptor
    type(glide_global_type) :: model
    !*FD the model instance
    logical,optional :: scale_vars
    !*FD Specifies whether fields should be scaled by factors when read in.

    ! local variables
    integer status
    integer up
    real(dp):: f1, f2, f3, f4, f5, f6, f7, f8
    integer :: ewnv, nsnv
    logical :: scale=.true.

    ! Deal with optional argument

    if (present(scale_vars)) scale=scale_vars

    ! Set up various constants. These were originally only
    ! done once, but are done each time now, for safety.

    ewnv = model%general%ewn - 1
    nsnv = model%general%nsn - 1
    f1 = scyr * thk0 / tim0
    f2 = scyr * vel0 * thk0
    f3 = vel0 / (vis0 * len0)
    f4 = vel0 * scyr * len0
    f5 = scyr * vel0
    f6 = scyr * vel0 * len0 / (thk0**2)
    f7 = tau0
    f8 = tau0 * len0 / (scyr * vel0) 
   
    ! read variables
    !GENVAR_READ!
  end subroutine glimmer_nc_read

end module glimmer_ncinfile
