! +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
! +                                                           +
! +  ncdf_file.f90 - part of the GLIMMER ice model            + 
! +                                                           +
! +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
! 
! Copyright (C) 2004 GLIMMER contributors - see COPYRIGHT file 
! for list of contributors.
!
! This program is free software; you can redistribute it and/or 
! modify it under the terms of the GNU General Public License as 
! published by the Free Software Foundation; either version 2 of 
! the License, or (at your option) any later version.
!
! This program is distributed in the hope that it will be useful, 
! but WITHOUT ANY WARRANTY; without even the implied warranty of 
! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the 
! GNU General Public License for more details.
!
! You should have received a copy of the GNU General Public License 
! along with this program; if not, write to the Free Software 
! Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 
! 02111-1307 USA
!
! GLIMMER is maintained by:
!
! Ian Rutt
! School of Geographical Sciences
! University of Bristol
! University Road
! Bristol
! BS8 1SS
! UK
!
! email: <i.c.rutt@bristol.ac.uk> or <ian.rutt@physics.org>
!
! GLIMMER is hosted on NeSCForge:
!
! http://forge.nesc.ac.uk/projects/glimmer/
!
! +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

#define NCO outfile%nc

module glimmer_ncfile
  !*FD routines for GLIMMER netCDF file I/O
  !*FD written by Magnus Hagdorn, 2004

  character(len=*), private, parameter :: mapvarname = 'mapping'

contains
  subroutine openall_out(model)
    !*FD open all netCDF files for output
    use glide_types
    use glimmer_ncdf
    implicit none
    type(glide_global_type) :: model
    
    ! local variables
    type(glimmer_nc_output), pointer :: oc

    oc=>model%funits%out_first
    do while(associated(oc))
       call glimmer_nc_createfile(oc,model)
       oc%next_write=model%numerics%tstart
       oc=>oc%next
    end do
  end subroutine openall_out

  subroutine writeall(model,atend)
    !*FD if necessary write to netCDF files
    use glide_types
    use glimmer_ncdf
    implicit none
    type(glide_global_type) :: model
    logical, optional :: atend

    ! local variables
    type(glimmer_nc_output), pointer :: oc
    logical :: forcewrite=.false.

    if (present(atend)) then
       forcewrite = atend
    end if

    oc=>model%funits%out_first
    do while(associated(oc))
       call glimmer_nc_checkwrite(oc,model,forcewrite)
       oc=>oc%next
    end do
  end subroutine writeall

  subroutine closeall_out(model)
    !*FD close all netCDF files for output
    use glide_types
    use glimmer_ncdf
    implicit none
    type(glide_global_type) :: model
    
    ! local variables
    type(glimmer_nc_output), pointer :: oc

    oc=>model%funits%out_first
    do while(associated(oc))
       oc=>delete(oc)
    end do
    model%funits%out_first=>NULL()
  end subroutine closeall_out

  subroutine glimmer_nc_createfile(outfile,model)
    !*FD create a new netCDF file
    use glimmer_log
    use glimmer_ncdf
    use glide_types
    use glimmer_CFproj
    use paramets, only : len0
    implicit none
    type(glimmer_nc_output), pointer :: outfile
    !*FD structure containg output netCDF descriptor
    type(glide_global_type) :: model
    !*FD the model instance

    ! local variables
    integer status
    integer i,mapid
    character(len=100) message
    
    ! create new netCDF file
    status = nf90_create(NCO%filename,NF90_CLOBBER,NCO%id)
    call nc_errorhandle(__FILE__,__LINE__,status)
    call write_log_div
    write(message,*) 'Opening file ',trim(NCO%filename),' for output; write period every ',outfile%freq,' years'
    call write_log(trim(message))

    ! writing meta data
    status = nf90_put_att(NCO%id, NF90_GLOBAL, 'Conventions', "CF-1.0")
    call nc_errorhandle(__FILE__,__LINE__,status)
    status = nf90_put_att(NCO%id, NF90_GLOBAL,'title',trim(outfile%metadata%title))
    call nc_errorhandle(__FILE__,__LINE__,status)
    status = nf90_put_att(NCO%id, NF90_GLOBAL,'institution',trim(outfile%metadata%institution))
    call nc_errorhandle(__FILE__,__LINE__,status)
    status = nf90_put_att(NCO%id, NF90_GLOBAL,'source',trim(outfile%metadata%source))
    call nc_errorhandle(__FILE__,__LINE__,status)
    status = nf90_put_att(NCO%id, NF90_GLOBAL,'history',trim(outfile%metadata%history))
    call nc_errorhandle(__FILE__,__LINE__,status)
    status = nf90_put_att(NCO%id, NF90_GLOBAL,'references',trim(outfile%metadata%references))
    call nc_errorhandle(__FILE__,__LINE__,status)
    status = nf90_put_att(NCO%id, NF90_GLOBAL,'comment',trim(outfile%metadata%comment))
    call nc_errorhandle(__FILE__,__LINE__,status)

    ! defining dimensions
    status = nf90_def_dim(NCO%id,'x0',model%general%ewn-1,NCO%x0dim)
    call nc_errorhandle(__FILE__,__LINE__,status)
    status = nf90_def_dim(NCO%id,'y0',model%general%nsn-1,NCO%y0dim)
    call nc_errorhandle(__FILE__,__LINE__,status)
    status = nf90_def_dim(NCO%id,'x1',model%general%ewn,NCO%x1dim)
    call nc_errorhandle(__FILE__,__LINE__,status)
    status = nf90_def_dim(NCO%id,'y1',model%general%nsn,NCO%y1dim)
    call nc_errorhandle(__FILE__,__LINE__,status)
    status = nf90_def_dim(NCO%id,'level',model%general%upn,NCO%leveldim)
    call nc_errorhandle(__FILE__,__LINE__,status)
    if (NCO%do_spot) then	 
       status = nf90_def_dim(NCO%id,'spot',size(outfile%spotx),NCO%spotdim)	 
       call nc_errorhandle(__FILE__,__LINE__,status)	 
    end if
    status = nf90_def_dim(NCO%id,'time',NF90_UNLIMITED,NCO%timedim)
    call nc_errorhandle(__FILE__,__LINE__,status)

    ! defining variables
    !GENVARS!

    ! adding projection info
    if (CFproj_allocated(model%projection)) then
       status = nf90_def_var(NCO%id,mapvarname,NF90_CHAR,mapid)
       call nc_errorhandle(__FILE__,__LINE__,status)
       call CFproj_PutProj(NCO%id,mapid,model%projection)
    end if

    ! leaving define mode
    status = nf90_enddef(NCO%id)
    call nc_errorhandle(__FILE__,__LINE__,status)
    
    ! filling coordinate variables
    do i=1, model%general%ewn-1
       status=nf90_put_var(NCO%id,NCO%x0var,((i-0.5)*model%numerics%dew*len0),(/i/))
       call nc_errorhandle(__FILE__,__LINE__,status)
    end do
    do i=1, model%general%nsn-1
       status=nf90_put_var(NCO%id,NCO%y0var,(i-0.5)*model%numerics%dns*len0,(/i/))
       call nc_errorhandle(__FILE__,__LINE__,status)
    end do
    do i=1, model%general%ewn
       status=nf90_put_var(NCO%id,NCO%x1var,(i-1.)*model%numerics%dew*len0,(/i/))
       call nc_errorhandle(__FILE__,__LINE__,status)
    end do
    do i=1, model%general%nsn
       status=nf90_put_var(NCO%id,NCO%y1var,(i-1.)*model%numerics%dns*len0,(/i/))
       call nc_errorhandle(__FILE__,__LINE__,status)
    end do    
    status=nf90_put_var(NCO%id,NCO%levelvar,model%numerics%sigma)
    call nc_errorhandle(__FILE__,__LINE__,status)
    if (NCO%do_spot) then
       do i=1,size(outfile%spotx)
          status=nf90_put_var(NCO%id,NCO%x0_spotvar, &
               (real(outfile%spotx(i))-0.5)*real(model%numerics%dew*len0),(/i/))
          call nc_errorhandle(__FILE__,__LINE__,status)
          status=nf90_put_var(NCO%id,NCO%y0_spotvar, &
               (real(outfile%spoty(i))-0.5)*real(model%numerics%dns*len0),(/i/))
          call nc_errorhandle(__FILE__,__LINE__,status)
          
          status=nf90_put_var(NCO%id,NCO%x1_spotvar, &
               (real(outfile%spotx(i))-1.0)*real(model%numerics%dew*len0),(/i/))
          call nc_errorhandle(__FILE__,__LINE__,status)
          status=nf90_put_var(NCO%id,NCO%y1_spotvar, &
               (real(outfile%spoty(i))-1.0)*real(model%numerics%dns*len0),(/i/))
          call nc_errorhandle(__FILE__,__LINE__,status)    
       end do
    end if
  end subroutine glimmer_nc_createfile

  subroutine glimmer_nc_checkwrite(outfile,model,forcewrite)
    !*FD check if we should write to file
    use glimmer_log
    use glimmer_ncdf
    use glide_types
    implicit none
    type(glimmer_nc_output), pointer :: outfile    
    type(glide_global_type) :: model
    logical forcewrite

    character(len=100) :: message
    integer status

    if (model%numerics%time.ge.outfile%next_write .or. (forcewrite.and.model%numerics%time.gt.outfile%next_write-outfile%freq)) then
       if (.not.NCO%just_processed) then
          call write_log_div
          write(message,*) 'Writing to file ', trim(NCO%filename), ' at time ', model%numerics%time
          call write_log(trim(message))
          
          ! increase next_write 
          outfile%next_write=outfile%next_write+outfile%freq
          ! write time
          status = nf90_put_var(NCO%id,NCO%timevar,model%numerics%time,(/outfile%timecounter/))
          NCO%just_processed = .TRUE.
          
          ! write standard variables
          call glimmer_nc_write(outfile,model)
       end if
    else
       if (NCO%just_processed) then
          ! finished writing during last time step, need to increase counter...
          
          outfile%timecounter = outfile%timecounter + 1

          status = nf90_sync(NCO%id)
          NCO%just_processed = .FALSE.
       end if
    end if
  end subroutine glimmer_nc_checkwrite

  subroutine glimmer_nc_write(outfile,model)
    !*FD write variables to a netCDF file
    use glimmer_ncdf
    use glide_types
    use glimmer_global, only : dp
    use physcon, only : scyr
    use paramets, only : thk0, tim0, vel0, vis0, len0, tau0, acc0
    implicit none
    type(glimmer_nc_output), pointer :: outfile
    !*FD structure containg output netCDF descriptor
    type(glide_global_type) :: model
    !*FD the model instance

    ! local variables
    integer status
    integer up, spot
    real(dp):: f1, f2, f3, f4, f5, f6, f7, f8
    integer :: ewnv, nsnv
    
    ! Set up various constants. These were originally only
    ! done once, but are done each time now, for safety.

    ewnv = model%general%ewn - 1
    nsnv = model%general%nsn - 1
    f1 = scyr * thk0 / tim0
    f2 = scyr * vel0 * thk0
    f3 = vel0 / (vis0 * len0)
    f4 = vel0 * scyr * len0
    f5 = scyr * vel0
    f6 = scyr * vel0 * len0 / (thk0**2)
    f7 = tau0
    f8 = tau0 * len0 / (scyr * vel0) 

    ! write variables
    !GENVAR_WRITE!

  end subroutine glimmer_nc_write
end module glimmer_ncfile
